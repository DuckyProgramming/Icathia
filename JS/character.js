class character{
    constructor(layer,graphicManager,x,y,name,direction){
        this.layer=layer
        this.graphicManager=graphicManager
        this.position={x:x,y:y}
        this.name=name
        this.offset={position:{x:x,y:y}}
        this.size=1
        this.fade=1
        this.time=0
        this.routines={}
        this.setupGraphics(direction)
    }
    setupGraphics(direction){
        let colorBase=this.graphicManager.getData(this.name).color
        switch(this.name){
            case `Shiru`:
                this.components={
                    hair:{
                        display:{back:true,front:true,glow:true},
                        fade:{back:1,front:1,glow:1},
                        color:colorBase.hair,
                        tail:[{display:true,fade:1,spin:-114},{display:true,fade:1,spin:114}],
                        bow:[{display:true,fade:1,spin:-96},{display:true,fade:1,spin:96}]
                    },legs:[
                        {
                            color:colorBase.skin.legs,
                            display:true,fade:1,
                            anim:{
                                top:{rho:15.5,phi:6,theta:-60},
                                middle:{rho:15.5,phi:12,theta:-150},
                            },points:{
                                top:{x:-3,y:-31,z:0},
                                middle:{x:0,y:0,z:0},
                                bottom:{x:0,y:0,z:0},
                            },appear:{
                                top:{x:0,y:0},
                                middle:{x:0,y:0},
                                bottom:{x:0,y:0},
                            },
                        },{
                            color:colorBase.skin.legs,
                            display:true,fade:1,
                            anim:{
                                top:{rho:15.5,phi:6,theta:60},
                                middle:{rho:15.5,phi:12,theta:150},
                            },points:{
                                top:{x:3,y:-31,z:0},
                                middle:{x:0,y:0,z:0},
                                bottom:{x:0,y:0,z:0},
                            },appear:{
                                top:{x:0,y:0},
                                middle:{x:0,y:0},
                                bottom:{x:0,y:0},
                            },
                        },
                    ],arms:[
                        {
                            color:colorBase.skin.arms,
                            display:true,fade:1,
                            anim:{
                                top:{rho:15.5,phi:27,theta:-90},
                                middle:{rho:15.5,phi:9,theta:-84},
                            },points:{
                                top:{x:-3.5,y:-53,z:0},
                                middle:{x:0,y:0,z:0},
                                bottom:{x:0,y:0,z:0},
                            },appear:{
                                top:{x:0,y:0},
                                middle:{x:0,y:0},
                                bottom:{x:0,y:0},
                                stack:{
                                    top:{x:0,y:0},
                                    middle:{x:0,y:0},
                                    bottom:{x:0,y:0},
                                },
                            },
                        },{
                            color:colorBase.skin.arms,
                            display:true,fade:1,
                            anim:{
                                top:{rho:15.5,phi:27,theta:90},
                                middle:{rho:15.5,phi:9,theta:84},
                            },points:{
                                top:{x:3.5,y:-53,z:0},
                                middle:{x:0,y:0,z:0},
                                bottom:{x:0,y:0,z:0},
                            },appear:{
                                top:{x:0,y:0},
                                middle:{x:0,y:0},
                                bottom:{x:0,y:0},
                                stack:{
                                    top:{x:0,y:0},
                                    middle:{x:0,y:0},
                                    bottom:{x:0,y:0},
                                },
                            },
                        },
                    ],body:{
                        color:colorBase.skin.body,
                        display:true,fade:1,
                        level:-44,dimensions:[9,28],
                        button:{spin:0},
                    },head:{
                        color:colorBase.skin.head,
                        display:true,fade:1,
                        level:-72,dimensions:[30,30],
                        mouth:{color:colorBase.mouth,display:true,fade:1,level:-64,anim:{x:8,y:3.5,open:0,wide:36}},
                        eye:[
                            {
                                display:true,fade:1,
                                color:colorBase.eye,
                                level:-67.75,anim:0,style:0,spin:-18
                            },{
                                display:true,fade:1,
                                color:colorBase.eye,
                                level:-67.75,anim:0,style:0,spin:18
                            },
                        ],blush:[
                            {
                                display:true,fade:1,
                                color:colorBase.blush,
                                level:-63.5,spin:-30,
                            },{
                                display:true,fade:1,
                                color:colorBase.blush,
                                level:-63.5,spin:30,
                            },
                        ],
                    },dress:{
                        display:{main:true,sleeve:[true,true]},
                        fade:{main:1,sleeve:[1,1]},
                        color:colorBase.dress,
                        bow:{display:true,fade:1,color:colorBase.dress.bow,spin:0},
                    }
                }
                this.sprites={spin:0,detail:constants.graphics.detail,spinDetail:0,spinDetailHead:0,temp:0}
                this.routines.calculatepart=[0,1,2,3]
            break
            case `Meri`:
                this.components={
                    hair:{
                        display:{back:true,front:true,glow:true},
                        fade:{back:1,front:1,tail:1,glow:1},
                        color:colorBase.hair,
                    },legs:[
                        {
                            color:colorBase.skin.legs,
                            display:true,fade:1,
                            anim:{
                                top:{rho:16.25,phi:6,theta:-60},
                                middle:{rho:16.25,phi:12,theta:-150},
                            },points:{
                                top:{x:-3,y:-32.5,z:0},
                                middle:{x:0,y:0,z:0},
                                bottom:{x:0,y:0,z:0},
                            },appear:{
                                top:{x:0,y:0},
                                middle:{x:0,y:0},
                                bottom:{x:0,y:0},
                            },
                        },{
                            color:colorBase.skin.legs,
                            display:true,fade:1,
                            anim:{
                                top:{rho:16.25,phi:6,theta:60},
                                middle:{rho:16.25,phi:12,theta:150},
                            },points:{
                                top:{x:3,y:-32.5,z:0},
                                middle:{x:0,y:0,z:0},
                                bottom:{x:0,y:0,z:0},
                            },appear:{
                                top:{x:0,y:0},
                                middle:{x:0,y:0},
                                bottom:{x:0,y:0},
                            },
                        },
                    ],arms:[
                        {
                            color:colorBase.skin.arms,
                            display:true,fade:1,
                            anim:{
                                top:{rho:16.25,phi:27,theta:-90},
                                middle:{rho:16.25,phi:9,theta:-84},
                            },points:{
                                top:{x:-3.25,y:-57.5,z:0},
                                middle:{x:0,y:0,z:0},
                                bottom:{x:0,y:0,z:0},
                            },appear:{
                                top:{x:0,y:0},
                                middle:{x:0,y:0},
                                bottom:{x:0,y:0},
                                stack:{
                                    top:{x:0,y:0},
                                    middle:{x:0,y:0},
                                    bottom:{x:0,y:0},
                                },
                            },
                        },{
                            color:colorBase.skin.arms,
                            display:true,fade:1,
                            anim:{
                                top:{rho:16.25,phi:27,theta:90},
                                middle:{rho:16.25,phi:9,theta:84},
                            },points:{
                                top:{x:3.25,y:-57.5,z:0},
                                middle:{x:0,y:0,z:0},
                                bottom:{x:0,y:0,z:0},
                            },appear:{
                                top:{x:0,y:0},
                                middle:{x:0,y:0},
                                bottom:{x:0,y:0},
                                stack:{
                                    top:{x:0,y:0},
                                    middle:{x:0,y:0},
                                    bottom:{x:0,y:0},
                                },
                            },
                        },
                    ],body:{
                        color:colorBase.skin.body,
                        display:true,fade:1,
                        level:-46,dimensions:[11,35],
                        button:{spin:0},
                    },head:{
                        color:colorBase.skin.head,
                        display:true,fade:1,
                        level:-78,dimensions:[30,30],
                        mouth:{color:colorBase.mouth,display:true,fade:1,level:-71.75,anim:{x:8,y:5,open:0,wide:39}},
                        eye:[
                            {
                                display:true,fade:1,
                                color:colorBase.eye,
                                level:-75.75,anim:0,style:0,spin:-18
                            },{
                                display:true,fade:1,
                                color:colorBase.eye,
                                level:-75.75,anim:0,style:0,spin:18
                            },
                        ],blush:[
                            {
                                display:true,fade:1,
                                color:colorBase.blush,
                                level:-71.5,spin:-30,
                            },{
                                display:true,fade:1,
                                color:colorBase.blush,
                                level:-71.5,spin:30,
                            },
                        ],
                    },dress:{
                        display:{main:true,sleeve:[true,true]},
                        fade:{main:1,sleeve:[1,1]},
                        color:colorBase.dress,
                        bow:{display:true,fade:1,color:colorBase.dress.bow,spin:180},
                        tie:{display:true,fade:1,color:colorBase.dress.tie,spin:0},
                    },shoe:[
                        {
                            display:true,fade:1,
                            color:colorBase.shoe,
                        },{
                            display:true,fade:1,
                            color:colorBase.shoe,
                        },
                    ],bell:{
                        display:true,fade:1,
                        color:colorBase.bell,
                        spin:0,
                    }
                }
                this.sprites={spin:0,detail:constants.graphics.detail,spinDetail:0,spinDetailHead:0,temp:0}
                this.routines.calculatepart=[0,1,2,3]
            break
        }
        this.direction={external:0,main:direction,head:direction,goal:direction}
        this.calc={int:[]}
    }
    calculatepart(){
        this.direction.head=this.direction.main
        for(let a=0,la=this.routines.calculatepart.length;a<la;a++){
            switch(this.routines.calculatepart[a]){
                case 0:
                    this.sprites.spin=round(((this.direction.main%360)+360)%360)
                    this.sprites.spinDetail=constrain(round((((this.direction.main%360)+360)%360)/this.sprites.detail),0,360/this.sprites.detail-1)
                    this.sprites.spinDetailHead=constrain(round((((this.direction.head%360)+360)%360)/this.sprites.detail),0,360/this.sprites.detail-1)
                break
                case 1:
                    for(let b=0,lb=this.components.legs.length;b<lb;b++){
                        let part=this.components.legs[b]

                        part.points.middle.x=part.points.top.x+part.anim.top.rho*lsin(part.anim.top.phi)*lsin(part.anim.top.theta)
                        part.points.middle.y=part.points.top.y+part.anim.top.rho*lcos(part.anim.top.phi)
                        part.points.middle.z=part.points.top.z+part.anim.top.rho*lsin(part.anim.top.phi)*lcos(part.anim.top.theta)

                        part.points.bottom.x=part.points.middle.x+part.anim.middle.rho*lsin(part.anim.middle.phi)*lsin(part.anim.middle.theta)
                        part.points.bottom.y=part.points.middle.y+part.anim.middle.rho*lcos(part.anim.middle.phi)
                        part.points.bottom.z=part.points.middle.z+part.anim.middle.rho*lsin(part.anim.middle.phi)*lcos(part.anim.middle.theta)

                        part.appear.top.x=lcos(this.direction.main)*part.points.top.x+lsin(this.direction.main)*part.points.top.z
                        part.appear.top.y=part.points.top.y
                        part.appear.top.z=-lsin(this.direction.main)*part.points.top.x+lcos(this.direction.main)*part.points.top.z

                        part.appear.middle.x=lcos(this.direction.main)*part.points.middle.x+lsin(this.direction.main)*part.points.middle.z
                        part.appear.middle.y=part.points.middle.y
                        part.appear.middle.z=-lsin(this.direction.main)*part.points.middle.x+lcos(this.direction.main)*part.points.middle.z

                        part.appear.bottom.x=lcos(this.direction.main)*part.points.bottom.x+lsin(this.direction.main)*part.points.bottom.z
                        part.appear.bottom.y=part.points.bottom.y
                        part.appear.bottom.z=-lsin(this.direction.main)*part.points.bottom.x+lcos(this.direction.main)*part.points.bottom.z
                    }
                break
                case 2:
                    for(let b=0,lb=this.components.arms.length;b<lb;b++){
                        let part=this.components.arms[b]

                        part.points.middle.x=part.points.top.x+part.anim.top.rho*lsin(part.anim.top.phi)*lsin(part.anim.top.theta)
                        part.points.middle.y=part.points.top.y+part.anim.top.rho*lcos(part.anim.top.phi)
                        part.points.middle.z=part.points.top.z+part.anim.top.rho*lsin(part.anim.top.phi)*lcos(part.anim.top.theta)

                        part.points.bottom.x=part.points.middle.x+part.anim.middle.rho*lsin(part.anim.middle.phi)*lsin(part.anim.middle.theta)
                        part.points.bottom.y=part.points.middle.y+part.anim.middle.rho*lcos(part.anim.middle.phi)
                        part.points.bottom.z=part.points.middle.z+part.anim.middle.rho*lsin(part.anim.middle.phi)*lcos(part.anim.middle.theta)

                        part.appear.top.x=lcos(this.direction.main)*part.points.top.x+lsin(this.direction.main)*part.points.top.z
                        part.appear.top.y=part.points.top.y
                        part.appear.top.z=-lsin(this.direction.main)*part.points.top.x+lcos(this.direction.main)*part.points.top.z

                        part.appear.middle.x=lcos(this.direction.main)*part.points.middle.x+lsin(this.direction.main)*part.points.middle.z
                        part.appear.middle.y=part.points.middle.y
                        part.appear.middle.z=-lsin(this.direction.main)*part.points.middle.x+lcos(this.direction.main)*part.points.middle.z

                        part.appear.bottom.x=lcos(this.direction.main)*part.points.bottom.x+lsin(this.direction.main)*part.points.bottom.z
                        part.appear.bottom.y=part.points.bottom.y
                        part.appear.bottom.z=-lsin(this.direction.main)*part.points.bottom.x+lcos(this.direction.main)*part.points.bottom.z
                    }
                break
                case 3:
                    for(let b=0,lb=this.components.arms.length;b<lb;b++){
                        let part=this.components.arms[b]
                        let deviation=(4-min(4,lcos(part.anim.top.theta+this.direction.main)*5+2))/2

                        part.appear.stack.top.x=(lcos(this.direction.main)*part.points.top.x+deviation)+lsin(this.direction.main)*part.points.top.z
                        part.appear.stack.top.y=part.appear.top.y-deviation/2
                        part.appear.stack.top.z=(-lsin(this.direction.main)*part.points.top.x+deviation)+lcos(this.direction.main)*part.points.top.z

                        part.appear.stack.middle.x=(lcos(this.direction.main)*part.points.middle.x+deviation)+lsin(this.direction.main)*part.points.middle.z
                        part.appear.stack.middle.y=part.appear.middle.y
                        part.appear.stack.middle.z=(-lsin(this.direction.main)*part.points.middle.x+deviation)+lcos(this.direction.main)*part.points.middle.z

                        part.appear.stack.bottom.x=(lcos(this.direction.main)*part.points.bottom.x+deviation)+lsin(this.direction.main)*part.points.bottom.z
                        part.appear.stack.bottom.y=part.appear.bottom.y
                        part.appear.stack.bottom.z=(-lsin(this.direction.main)*part.points.bottom.x+deviation)+lcos(this.direction.main)*part.points.bottom.z
                    }
                break
            }
        }
    }
    flashColor(color){
        return color
    }
    display(){
        if(this.fade>0&&this.size>0){
            this.calculatepart()
            this.layer.push()
            this.layer.translate(this.position.x+this.offset.position.x,this.position.y+this.offset.position.y)
            this.layer.rotate(this.direction.external)
            this.layer.scale(this.size)
            switch(this.name){
                case `Shiru`:
                    for(let a=0,la=2;a<la;a++){
                        if(this.components.hair.bow[a].display){
                            let dir=this.components.hair.bow[a].spin+this.direction.main
                            if(lcos(dir)<=0){
                                this.layer.translate(lsin(dir)*16,-80)
                                this.layer.scale(lcos(dir)*0.6+0.4,1)
                                this.layer.fill(...this.flashColor(this.components.hair.color.bow),this.fade*this.components.hair.bow[a].fade)
                                this.layer.noStroke()
                                this.layer.ellipse(0,0,2)
                                this.layer.quad(0.5,-0.5,-5,2.75,-3.75,3.75,-2.75,5)
                                this.layer.quad(-0.5,-0.5,5,2.75,3.75,3.75,2.75,5)
                                this.layer.scale(1/(lcos(dir)*0.6+0.4),1)
                                this.layer.translate(lsin(dir)*-16,80)
                            }
                        }
                    }
                    if(this.components.hair.display.back){
                        let size=this.fade*this.components.hair.fade.back
                        this.layer.image(this.graphicManager.getData(this.name).sprites.hair.back[this.sprites.spinDetail],0,this.components.head.level+10*size,40*size,60*size)
                    }
                    for(let a=0,la=2;a<la;a++){
                        let dir=this.components.hair.tail[a].spin+this.direction.main
                        if(this.components.hair.tail[a]&&lcos(dir)<=0){
                            this.layer.translate(lsin(dir)*16,-50)
                            this.layer.rotate(lsin(dir)*-12)
                            this.layer.image(this.graphicManager.getData(this.name).sprites.hair.tail[a][this.sprites.spinDetail],0,5*this.fade*this.components.hair.tail[a].fade,20*this.fade*this.components.hair.tail[a].fade,60*this.fade*this.components.hair.tail[a].fade)
                            this.layer.rotate(lsin(dir)*12)
                            this.layer.translate(lsin(dir)*-16,50)
                        }
                    }
                    for(let a=0,la=this.components.arms.length;a<la;a++){
                        let part=this.components.arms[a]
                        if(part.display&&lcos(part.anim.top.theta+this.direction.main)<=-0.6){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(4)
                            this.layer.line(part.appear.top.x,part.appear.top.y,part.appear.middle.x,part.appear.middle.y)
                            this.layer.line(part.appear.middle.x,part.appear.middle.y,part.appear.bottom.x,part.appear.bottom.y)
                            if(this.components.dress.display.sleeve[a]){
                                this.displayComponent(0,[a])
                            }
                        }
                    }
                    if(this.components.body.display){
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.body.color),this.fade*this.components.body.fade)
                        this.layer.ellipse(0,this.components.body.level,this.components.body.dimensions[0],this.components.body.dimensions[1])
                    }
                    for(let a=0,la=this.components.arms.length;a<la;a++){
                        let part=this.components.arms[a]
                        if(part.display&&lcos(part.anim.top.theta+this.direction.main)<0.4&&lcos(part.anim.top.theta+this.direction.main)>-0.6){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(4)
                            this.layer.line(part.appear.top.x,part.appear.top.y,part.appear.middle.x,part.appear.middle.y)
                            this.layer.line(part.appear.middle.x,part.appear.middle.y,part.appear.bottom.x,part.appear.bottom.y)
                            if(this.components.dress.display.sleeve[a]){
                                this.displayComponent(0,[a])
                            }
                        }
                    }
                    for(let a=0,la=2;a<la;a++){
                        let part=this.components.legs[this.components.legs[0].appear.bottom.z<=this.components.legs[1].appear.bottom.z?a:1-a]
                        if(part.display){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(4)
                            this.layer.line(part.appear.top.x,part.appear.top.y,part.appear.middle.x,part.appear.middle.y)
                            this.layer.line(part.appear.middle.x,part.appear.middle.y,part.appear.bottom.x,part.appear.bottom.y)
                        }
                    }
                    for(let a=0,la=this.components.arms.length;a<la;a++){
                        let part=this.components.arms[a]
                        if(part.display&&lcos(part.anim.top.theta+this.direction.main)>-0.4&&lcos(part.anim.top.theta+this.direction.main)<0.4){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(min(4,lcos(part.anim.top.theta+this.direction.main)*5+2))
                            this.layer.line(part.appear.stack.top.x,part.appear.stack.top.y,part.appear.stack.middle.x,part.appear.stack.middle.y)
                            this.layer.line(part.appear.stack.middle.x,part.appear.stack.middle.y,part.appear.stack.bottom.x,part.appear.stack.bottom.y)
                            if(this.components.dress.display.sleeve[a]){
                                this.displayComponent(0,[a])
                            }
                        }
                    }
                    if(this.components.dress.bow.display&&lcos(this.direction.main+this.components.dress.bow.spin)<=0){
                        let part=this.components.dress.bow

                        this.layer.push()
                        this.layer.translate(lsin(this.direction.main+part.spin)*5.5,-54)
                        this.layer.rotate(lsin(this.direction.main+part.spin)*-15)
                        this.layer.scale(lcos(this.direction.main+part.spin),1)
                        this.layer.noStroke()

                        let flashes=[this.flashColor(part.color[0]),this.flashColor(part.color[1])]
                        
                        this.layer.fill(flashes[0][0]-30,flashes[0][1]-30,flashes[0][2]-30,this.fade*part.fade)
                        this.layer.rotate(-24)
                        this.layer.quad(0,0,-1,6,0,5,1,6)
                        this.layer.rotate(48)
                        this.layer.quad(0,0,-1,6,0,5,1,6)
                        this.layer.rotate(-24)
                        this.layer.fill(...this.flashColor(part.color[0]),this.fade*part.fade)
                        this.layer.rotate(-81)
                        pentagon(this.layer,0.8,0,-0.8,0,-2.4,6,0,5.25,2.4,6)
                        this.layer.rotate(162)
                        pentagon(this.layer,0.8,0,-0.8,0,-2.4,6,0,5.25,2.4,6)
                        this.layer.rotate(-81)

                        this.layer.fill(flashes[1][0]-30,flashes[1][1]-30,flashes[1][2]-30,this.fade*part.fade)
                        this.layer.rotate(-24)
                        this.layer.quad(0,-0.1,-0.8,4.8,0,4,0.8,4.8)
                        this.layer.rotate(48)
                        this.layer.quad(0,-0.1,-0.8,4.8,0,4,0.8,4.8)
                        this.layer.rotate(-24)
                        this.layer.fill(...this.flashColor(part.color[1]),this.fade*part.fade)
                        this.layer.rotate(-81)
                        pentagon(this.layer,0.85,0,-0.85,0,-2.08,4.8,0,4.2,2.08,4.8)
                        this.layer.rotate(162)
                        pentagon(this.layer,0.85,0,-0.85,0,-2.08,4.8,0,4.2,2.08,4.8)
                        this.layer.rotate(-81)

                        this.layer.fill(flashes[0][0]-30,flashes[0][1]-30,flashes[0][2]-30,this.fade*part.fade)
                        this.layer.rotate(-24)
                        this.layer.quad(0,-0.2,-0.7,4.2,0,3.5,0.7,4.2)
                        this.layer.rotate(48)
                        this.layer.quad(0,-0.2,-0.7,4.2,0,3.5,0.7,4.2)
                        this.layer.rotate(-24)
                        this.layer.fill(...this.flashColor(part.color[0]),this.fade*part.fade)
                        this.layer.rotate(-81)
                        pentagon(this.layer,0.9,0,-0.9,0,-1.92,4.2,0,3.675,1.92,4.2)
                        this.layer.rotate(162)
                        pentagon(this.layer,0.9,0,-0.9,0,-1.92,4.2,0,3.675,1.92,4.2)
                        this.layer.rotate(-81)

                        this.layer.fill(...this.flashColor(part.color[1]),this.fade*part.fade)
                        this.layer.rotate(-81)
                        this.layer.quad(0.2,0,-0.2,0,-1.6,5.75,-1.1,5.5)
                        this.layer.quad(-0.2,0,0.2,0,1.6,5.75,1.1,5.5)
                        this.layer.rotate(162)
                        this.layer.quad(0.2,0,-0.2,0,-1.6,5.75,-1.1,5.5)
                        this.layer.quad(-0.2,0,0.2,0,1.6,5.75,1.1,5.5)
                        this.layer.rotate(-81)
                        this.layer.fill(flashes[0][0]-15,flashes[0][1]-15,flashes[0][2]-15,this.fade*part.fade)
                        this.layer.rect(0,0,2.5,2.5,0.5)
                        this.layer.fill(flashes[1][0]-15,flashes[1][1]-15,flashes[1][2]-15,this.fade*part.fade)
                        this.layer.rect(0,0,2.5,0.5)
                        this.layer.rect(0,0,0.5,2.5)

                        this.layer.pop()
                    }
                    if(this.components.dress.display.main){
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.dress.color.inside),this.fade*this.components.dress.fade.main)
                        for(let a=0,la=16;a<la;a++){
                            if(lcos((a+0.5)/la*360+this.direction.main)>0){
                                this.layer.arc(11.7*lsin((a+0.5)/la*360+this.direction.main),-27.25,4*lcos((a+0.5)/la*360+this.direction.main),3.5,0,180)
                            }
                        }
                        this.layer.fill(...this.flashColor(this.components.dress.color.main),this.fade*this.components.dress.fade.main)
                        this.layer.arc(0,-35,11,42,-180,0)
                        this.layer.quad(-5.5,-36,5.5,-36,12,-27,-12,-27)
                        for(let a=0,la=16;a<la;a++){
                            if(lcos(a/la*360+this.direction.main)>0){
                                this.layer.arc(11.7*lsin(a/la*360+this.direction.main),-27.25,5*lcos(a/la*360+this.direction.main),4,0,180)
                            }
                        }
                        this.layer.stroke(...this.flashColor(this.components.dress.color.highlight),this.fade*this.components.dress.fade.main)
                        this.layer.strokeWeight(0.25)
                        for(let a=0,la=16;a<la;a++){
                            if(lcos(a/la*360+this.direction.main)>0){
                                this.layer.arc(10.8*lsin(a/la*360+this.direction.main),-28.5,4.5*lcos(a/la*360+this.direction.main),2,10,170)
                            }
                        }
                        this.layer.stroke(...this.flashColor(this.components.dress.color.border),this.fade*this.components.dress.fade.main)
                        this.layer.strokeWeight(0.5)
                        for(let a=0,la=2;a<la;a++){
                            if(lcos(this.direction.main-22.5+a*45)>0){
                                this.layer.line(5.4*lsin(this.direction.main-22.5+a*45),-37,3.9*lsin(this.direction.main-22.5+a*45),-52)
                                if(a==0){
                                    this.layer.line(5.4*lsin(this.direction.main-22.5+a*45),-37,-5.4,-37)
                                }else if(a==1){
                                    this.layer.line(5.4*lsin(this.direction.main-22.5+a*45),-37,5.4,-37)
                                }
                            }
                        }
                        if(lcos(this.direction.main-22.5)<=0&&lcos(this.direction.main+22.5)<=0){
                            this.layer.line(-5.4,-37,5.4,-37)
                        }
                        this.layer.strokeWeight(0.3)
                        if(lcos(this.direction.main-22.5)>0&&lcos(this.direction.main+22.5)>0){
                            for(let a=0,la=4;a<la;a++){
                                this.layer.line((5.1-a*0.25)*lsin(this.direction.main-22.5),-40-a*2.5,(5.35-a*0.25)*lsin(this.direction.main+22.5),-37.5-a*2.5)
                                this.layer.line((5.35-a*0.25)*lsin(this.direction.main-22.5),-37.5-a*2.5,(5.1-a*0.25)*lsin(this.direction.main+22.5),-40-a*2.5)
                            }
                        }else if(lcos(this.direction.main-22.5)>0){
                            for(let a=0,la=4;a<la;a++){
                                this.layer.line((5.1-a*0.25)*lsin(this.direction.main-22.5),-40-a*2.5,5.4-a*0.25,-37.5-a*2.5)
                                this.layer.line((5.35-a*0.25)*lsin(this.direction.main-22.5),-37.5-a*2.5,5.4-a*0.25,-40-a*2.5)
                            }
                        }else if(lcos(this.direction.main+22.5)>0){
                            for(let a=0,la=4;a<la;a++){
                                this.layer.line((5.1-a*0.25)*lsin(this.direction.main+22.5),-40-a*2.5,-5.4+a*0.25,-37.5-a*2.5)
                                this.layer.line((5.35-a*0.25)*lsin(this.direction.main+22.5),-37.5-a*2.5,-5.4+a*0.25,-40-a*2.5)
                            }
                        }
                    }
                    for(let a=0,la=this.components.arms.length;a<la;a++){
                        let part=this.components.arms[a]
                        if(part.display&&lcos(part.anim.top.theta+this.direction.main)>=0.4){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(min(4,lcos(part.anim.top.theta+this.direction.main)*5+2))
                            this.layer.line(part.appear.stack.top.x,part.appear.stack.top.y,part.appear.stack.middle.x,part.appear.stack.middle.y)
                            this.layer.line(part.appear.stack.middle.x,part.appear.stack.middle.y,part.appear.stack.bottom.x,part.appear.stack.bottom.y)
                            if(this.components.dress.display.sleeve[a]){
                                this.displayComponent(0,[a])
                            }
                        }
                    }
                    if(this.components.dress.display.main){
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.dress.color.shawl),this.fade*this.components.dress.fade.main)
                        this.layer.arc(0,-46,18,21,-180,0)
                        for(let a=0,la=20;a<la;a++){
                            if(lcos(a/la*360+this.direction.main)>0){
                                this.layer.arc(8.9*lsin(a/la*360+this.direction.main),-46.25,3*lcos(a/la*360+this.direction.main),2,0,180)
                            }
                        }
                        this.layer.stroke(...this.flashColor(this.components.dress.color.highlight),this.fade*this.components.dress.fade.main)
                        this.layer.strokeWeight(0.25)
                        for(let a=0,la=20;a<la;a++){
                            if(lcos(a/la*360+this.direction.main)>0){
                                this.layer.arc(8.75*lsin(a/la*360+this.direction.main),-48,3*lcos(a/la*360+this.direction.main),2,10,170)
                            }
                        }
                        this.layer.arc(0,-56,8,4,10,170)
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.body.color),this.fade*this.components.dress.fade.main)
                        this.layer.ellipse(0,-56,5,2)
                    }
                    if(this.components.dress.bow.display&&lcos(this.direction.main+this.components.dress.bow.spin)>0){
                        let part=this.components.dress.bow

                        this.layer.push()
                        this.layer.translate(lsin(this.direction.main+part.spin)*5.5,-54)
                        this.layer.rotate(lsin(this.direction.main+part.spin)*-15)
                        this.layer.scale(lcos(this.direction.main+part.spin),1)
                        this.layer.noStroke()

                        let flashes=[this.flashColor(part.color[0]),this.flashColor(part.color[1])]
                        
                        this.layer.fill(flashes[0][0]-30,flashes[0][1]-30,flashes[0][2]-30,this.fade*part.fade)
                        this.layer.rotate(-24)
                        this.layer.quad(0,0,-1,6,0,5,1,6)
                        this.layer.rotate(48)
                        this.layer.quad(0,0,-1,6,0,5,1,6)
                        this.layer.rotate(-24)
                        this.layer.fill(...this.flashColor(part.color[0]),this.fade*part.fade)
                        this.layer.rotate(-81)
                        pentagon(this.layer,0.8,0,-0.8,0,-2.4,6,0,5.25,2.4,6)
                        this.layer.rotate(162)
                        pentagon(this.layer,0.8,0,-0.8,0,-2.4,6,0,5.25,2.4,6)
                        this.layer.rotate(-81)

                        this.layer.fill(flashes[1][0]-30,flashes[1][1]-30,flashes[1][2]-30,this.fade*part.fade)
                        this.layer.rotate(-24)
                        this.layer.quad(0,-0.1,-0.8,4.8,0,4,0.8,4.8)
                        this.layer.rotate(48)
                        this.layer.quad(0,-0.1,-0.8,4.8,0,4,0.8,4.8)
                        this.layer.rotate(-24)
                        this.layer.fill(...this.flashColor(part.color[1]),this.fade*part.fade)
                        this.layer.rotate(-81)
                        pentagon(this.layer,0.85,0,-0.85,0,-2.08,4.8,0,4.2,2.08,4.8)
                        this.layer.rotate(162)
                        pentagon(this.layer,0.85,0,-0.85,0,-2.08,4.8,0,4.2,2.08,4.8)
                        this.layer.rotate(-81)

                        this.layer.fill(flashes[0][0]-30,flashes[0][1]-30,flashes[0][2]-30,this.fade*part.fade)
                        this.layer.rotate(-24)
                        this.layer.quad(0,-0.2,-0.7,4.2,0,3.5,0.7,4.2)
                        this.layer.rotate(48)
                        this.layer.quad(0,-0.2,-0.7,4.2,0,3.5,0.7,4.2)
                        this.layer.rotate(-24)
                        this.layer.fill(...this.flashColor(part.color[0]),this.fade*part.fade)
                        this.layer.rotate(-81)
                        pentagon(this.layer,0.9,0,-0.9,0,-1.92,4.2,0,3.675,1.92,4.2)
                        this.layer.rotate(162)
                        pentagon(this.layer,0.9,0,-0.9,0,-1.92,4.2,0,3.675,1.92,4.2)
                        this.layer.rotate(-81)

                        this.layer.fill(...this.flashColor(part.color[1]),this.fade*part.fade)
                        this.layer.rotate(-81)
                        this.layer.quad(0.2,0,-0.2,0,-1.6,5.75,-1.1,5.5)
                        this.layer.quad(-0.2,0,0.2,0,1.6,5.75,1.1,5.5)
                        this.layer.rotate(162)
                        this.layer.quad(0.2,0,-0.2,0,-1.6,5.75,-1.1,5.5)
                        this.layer.quad(-0.2,0,0.2,0,1.6,5.75,1.1,5.5)
                        this.layer.rotate(-81)
                        this.layer.fill(flashes[0][0]-15,flashes[0][1]-15,flashes[0][2]-15,this.fade*part.fade)
                        this.layer.rect(0,0,2.5,2.5,0.5)
                        this.layer.fill(flashes[1][0]-15,flashes[1][1]-15,flashes[1][2]-15,this.fade*part.fade)
                        this.layer.rect(0,0,2.5,0.5)
                        this.layer.rect(0,0,0.5,2.5)

                        this.layer.pop()
                    }
                    if(this.components.head.display){
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.head.color),this.fade*this.components.head.fade)
                        this.layer.ellipse(0,this.components.head.level,this.components.head.dimensions[0],this.components.head.dimensions[1])
                    }
                    for(let a=0,la=2;a<la;a++){
                        let part=this.components.head.blush[a]
                        if(part.display){
                            this.layer.fill(...this.flashColor(part.color),this.fade*part.fade*0.2)
                            if(lcos(part.spin+this.direction.main)>0){
                                this.layer.push()
                                this.layer.translate(12.5*lsin(part.spin+this.direction.main),part.level)
                                this.layer.rotate(36*lsin(part.spin+this.direction.main))
                                this.layer.ellipse(0,0,5*lcos(part.spin+this.direction.main),4)
                                this.layer.ellipse(0,0,3.75*lcos(part.spin+this.direction.main),3)
                                this.layer.ellipse(0,0,2.5*lcos(part.spin+this.direction.main),2)
                                this.layer.ellipse(0,0,1.25*lcos(part.spin+this.direction.main),1)
                                this.layer.pop()
                            }
                        }
                    }
                    for(let a=0,la=2;a<la;a++){
                        if(this.components.head.eye[a].display){
                            this.displayGeneralComponent(0,[a])
                        }
                    }
                    if(this.components.head.mouth.display&&lcos(this.direction.main)>0){
                        this.displayGeneralComponent(1,[])
                    }
                    for(let a=0,la=2;a<la;a++){
                        let dir=this.components.hair.tail[a].spin+this.direction.main
                        if(this.components.hair.tail[a]&&lcos(dir)>0){
                            this.layer.translate(lsin(dir)*16,-50)
                            this.layer.rotate(lsin(dir)*-12)
                            this.layer.image(this.graphicManager.getData(this.name).sprites.hair.tail[a][this.sprites.spinDetail],0,5*this.fade*this.components.hair.tail[a].fade,20*this.fade*this.components.hair.tail[a].fade,60*this.fade*this.components.hair.tail[a].fade)
                            this.layer.rotate(lsin(dir)*12)
                            this.layer.translate(lsin(dir)*-16,50)
                        }
                    }
                    if(this.components.hair.display.front){
                        let size=this.fade*this.components.hair.fade.front
                        this.layer.image(this.graphicManager.getData(this.name).sprites.hair.front[this.sprites.spinDetail],0,this.components.head.level+10*size,40*size,60*size)
                    }
                    if(this.components.hair.display.glow){
                        this.layer.noFill()
                        this.layer.stroke(...this.components.hair.color.glow,this.fade/4*this.components.hair.fade.glow)
                        for(let a=0,la=6;a<la;a++){
                            this.layer.strokeWeight((3-a/2))
                            this.layer.arc(0,this.components.head.level,this.components.head.dimensions[0]+a,this.components.head.dimensions[1]+a,-72+a*6,-12-a*6)
                        }
                    }
                    for(let a=0,la=2;a<la;a++){
                        if(this.components.hair.bow[a].display){
                            let dir=this.components.hair.bow[a].spin+this.direction.main
                            if(lcos(dir)>0){
                                this.layer.translate(lsin(dir)*16,-80)
                                this.layer.scale(lcos(dir)*0.6+0.4,1)
                                this.layer.fill(...this.flashColor(this.components.hair.color.bow),this.fade*this.components.hair.bow[a].fade)
                                this.layer.noStroke()
                                this.layer.ellipse(0,0,2)
                                this.layer.quad(0.5,-0.5,-5,2.75,-3.75,3.75,-2.75,5)
                                this.layer.quad(-0.5,-0.5,5,2.75,3.75,3.75,2.75,5)
                                this.layer.scale(1/(lcos(dir)*0.6+0.4),1)
                                this.layer.translate(lsin(dir)*-16,80)
                            }
                        }
                    }
                break
                case `Meri`:
                    if(this.components.hair.display.back){
                        let size=this.fade*this.components.hair.fade.back
                        this.layer.image(this.graphicManager.getData(this.name).sprites.hair.back[this.sprites.spinDetail],0,this.components.head.level+10*size,40*size,60*size)
                    }
                    for(let a=0,la=this.components.arms.length;a<la;a++){
                        let part=this.components.arms[a]
                        if(part.display&&lcos(part.anim.top.theta+this.direction.main)<=-0.6){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(4)
                            this.layer.line(part.appear.top.x,part.appear.top.y,part.appear.middle.x,part.appear.middle.y)
                            this.layer.line(part.appear.middle.x,part.appear.middle.y,part.appear.bottom.x,part.appear.bottom.y)
                            if(this.components.dress.display.sleeve[a]){
                                this.displayComponent(0,[a])
                            }
                        }
                    }
                    if(this.components.bell.display&&lcos(this.components.bell.spin+this.direction.main)<=0){
                        this.layer.noStroke()
                        this.layer.fill(...this.components.bell.color[0],this.components.bell.fade)
                        this.layer.ellipse(7*lsin(this.components.bell.spin+this.direction.main),-59,6)
                    }
                    if(this.components.dress.tie.display&&lcos(this.components.dress.tie.spin+this.direction.main)<=0){
                        let part=this.components.dress.tie
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(part.color),this.fade*part.fade)
                        this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                        this.layer.strokeWeight(0.5)
                        this.layer.strokeJoin(ROUND)
                        this.layer.quad(
                            4*lsin(part.spin+this.direction.main),-59.5,
                            4.5*lsin(part.spin+this.direction.main)-2.5*lcos(part.spin+this.direction.main),-55.5,
                            4.5*lsin(part.spin+this.direction.main)-3*lcos(part.spin+this.direction.main),-53,
                            4.5*lsin(part.spin+this.direction.main)-1.5*lcos(part.spin+this.direction.main),-55
                        )
                        this.layer.quad(
                            4*lsin(part.spin+this.direction.main),-59.5,
                            4.5*lsin(part.spin+this.direction.main)+2.5*lcos(part.spin+this.direction.main),-55.5,
                            4.5*lsin(part.spin+this.direction.main)+3*lcos(part.spin+this.direction.main),-53,
                            4.5*lsin(part.spin+this.direction.main)+1.5*lcos(part.spin+this.direction.main),-55
                        )
                        this.layer.strokeJoin(MITER)
                    }
                    if(this.components.dress.bow.display&&lcos(this.components.dress.bow.spin+this.direction.main)<=0){
                        let part=this.components.dress.bow
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(part.color),this.fade*part.fade)
                        this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                        this.layer.strokeWeight(1)
                        this.layer.strokeJoin(ROUND)
                        this.layer.triangle(
                            6.75*lsin(part.spin+this.direction.main),-46,
                            6.75*lsin(part.spin+this.direction.main)-7*lcos(part.spin+this.direction.main),-48.5,
                            6.75*lsin(part.spin+this.direction.main)-6.5*lcos(part.spin+this.direction.main),-42.5
                        )
                        this.layer.triangle(
                            6.75*lsin(part.spin+this.direction.main),-46,
                            6.75*lsin(part.spin+this.direction.main)+7*lcos(part.spin+this.direction.main),-48.5,
                            6.75*lsin(part.spin+this.direction.main)+6.5*lcos(part.spin+this.direction.main),-42.5
                        )
                        this.layer.strokeJoin(MITER)
                        for(let a=0,la=15;a<la;a++){
                            this.layer.strokeWeight(1.5+a*0.08)
                            this.layer.line(
                                6.75*lsin(part.spin+this.direction.main)-a*(1+0.25*lsin(a/la*480+this.time))*lcos(part.spin+this.direction.main),
                                -45.5+a*1.5,
                                6.75*lsin(part.spin+this.direction.main)-(a+1)*(1+0.25*lsin((a+1)/la*480+this.time))*lcos(part.spin+this.direction.main),
                                -45.5+(a+1)*1.5
                            )
                        }
                        for(let a=0,la=15;a<la;a++){
                            this.layer.strokeWeight(1.5+a*0.08)
                            this.layer.line(
                                6.75*lsin(part.spin+this.direction.main)+a*(1+0.25*lsin((a+2.5)/la*480+this.time))*lcos(part.spin+this.direction.main),
                                -45.5+a*1.5,
                                6.75*lsin(part.spin+this.direction.main)+(a+1)*(1+0.25*lsin((a+3.5)/la*480+this.time))*lcos(part.spin+this.direction.main),
                                -45.5+(a+1)*1.5
                            )
                        }
                    }
                    if(this.components.body.display){
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.body.color),this.fade*this.components.body.fade)
                        this.layer.ellipse(0,this.components.body.level,this.components.body.dimensions[0],this.components.body.dimensions[1])
                    }
                    for(let a=0,la=this.components.arms.length;a<la;a++){
                        let part=this.components.arms[a]
                        if(part.display&&lcos(part.anim.top.theta+this.direction.main)<0.4&&lcos(part.anim.top.theta+this.direction.main)>-0.6){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(4)
                            this.layer.line(part.appear.top.x,part.appear.top.y,part.appear.middle.x,part.appear.middle.y)
                            this.layer.line(part.appear.middle.x,part.appear.middle.y,part.appear.bottom.x,part.appear.bottom.y)
                            if(this.components.dress.display.sleeve[a]){
                                this.displayComponent(0,[a])
                            }
                        }
                    }
                    for(let a=0,la=2;a<la;a++){
                        let key=this.components.legs[0].appear.bottom.z<=this.components.legs[1].appear.bottom.z?a:1-a
                        let part=this.components.legs[key]
                        if(this.components.shoe[key].display){
                            let color=this.flashColor(upColor(this.components.shoe[key].color,lcos(this.direction.main+part.appear.middle.z)*10,[1,1,1]))
                            this.layer.fill(...color,this.fade*this.components.shoe[key].fade)
                            this.layer.noStroke()
                            this.layer.ellipse(part.appear.bottom.x,part.appear.bottom.y+1.25,5.5,3)
                        }
                        if(this.components.legs[key].display){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(4)
                            this.layer.line(part.appear.top.x,part.appear.top.y,part.appear.middle.x,part.appear.middle.y)
                            this.layer.line(part.appear.middle.x,part.appear.middle.y,part.appear.bottom.x,part.appear.bottom.y)
                        }
                        if(this.components.shoe[key].display){
                            let color=this.flashColor(upColor(this.components.shoe[key].color,lcos(this.direction.main+part.appear.middle.z)*10,[1,1,1]))
                            this.layer.stroke(...color,this.fade*this.components.shoe[key].fade)
                            this.layer.strokeWeight(1)
                            this.layer.noFill()
                            this.layer.arc(part.appear.bottom.x,part.appear.bottom.y+1.25,4.5,2,0,180)
                            this.layer.strokeWeight(1.25)
                            this.layer.arc(part.appear.bottom.x+lsin(this.direction.main)*2,part.appear.bottom.y+1.25+abs(lsin(this.direction.main))*0.5,4.5+abs(lsin(this.direction.main))*2,1.5+abs(lsin(this.direction.main)),-180-min(0,lsin(this.direction.main))*90,-max(0,lsin(this.direction.main))*90)
                        }
                    }
                    for(let a=0,la=this.components.arms.length;a<la;a++){
                        let part=this.components.arms[a]
                        if(part.display&&lcos(part.anim.top.theta+this.direction.main)>-0.4&&lcos(part.anim.top.theta+this.direction.main)<0.4){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(min(4,lcos(part.anim.top.theta+this.direction.main)*5+2))
                            this.layer.line(part.appear.stack.top.x,part.appear.stack.top.y,part.appear.stack.middle.x,part.appear.stack.middle.y)
                            this.layer.line(part.appear.stack.middle.x,part.appear.stack.middle.y,part.appear.stack.bottom.x,part.appear.stack.bottom.y)
                            if(this.components.dress.display.sleeve[a]){
                                this.displayComponent(0,[a])
                            }
                        }
                    }
                    if(this.components.dress.display.main){
                        let part=this.components.dress
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(part.color.highlight),this.fade*part.fade.main)
                        for(let a=0,la=18;a<la;a++){
                            if(lcos(a/la*360)>0){
                                this.layer.push()
                                this.layer.translate(13.75*lsin((a-0.2)/la*360),-24.5+4*lcos((a-0.2)/la*360))
                                this.layer.rotate(-18*lsin(lsin((a-0.2)/la*360)*90))
                                this.layer.ellipse(0,0,3.25*lcos((a-0.2)/la*360),4.5)
                                this.layer.pop()
                                this.layer.push()
                                this.layer.translate(13.75*lsin((a+0.2)/la*360),-24.5+4*lcos((a+0.2)/la*360))
                                this.layer.rotate(-18*lsin(lsin((a+0.2)/la*360)*90))
                                this.layer.ellipse(0,0,3.25*lcos((a+0.2)/la*360),4.5)
                                this.layer.pop()
                            }
                        }
                        this.layer.fill(...this.flashColor(part.color.main),this.fade*part.fade.main)
                        this.layer.quad(-6,-44,6,-44,14,-24,-14,-24)
                        this.layer.ellipse(0,-24,28,8)
                        this.layer.arc(0,-44,12,40,-180,0)
                        this.layer.ellipse(0,-44,12,2)
                        this.layer.fill(...this.flashColor(part.color.over),this.fade*part.fade.main)
                        for(let a=0,la=15;a<la;a++){
                            if(lcos((a-0.16)/la*360)>0){
                                this.layer.triangle(
                                    6*lsin((a-0.16)/la*360),-45.5+lcos((a-0.16)/la*360)*2,
                                    14*lsin((a-0.24)/la*360),-24+4*sqrt(1-lsin((a-0.24)/la*360)**2),
                                    14*lsin((a-0.08)/la*360),-24+4*sqrt(1-lsin((a-0.08)/la*360)**2)
                                )
                            }
                            if(lcos((a+0.16)/la*360)>0){
                                this.layer.triangle(
                                    6*lsin((a+0.16)/la*360),-45.5+lcos((a+0.16)/la*360)*2,
                                    14*lsin((a+0.24)/la*360),-24+4*sqrt(1-lsin((a+0.24)/la*360)**2),
                                    14*lsin((a+0.08)/la*360),-24+4*sqrt(1-lsin((a+0.08)/la*360)**2)
                                )
                            }
                        }
                        this.layer.fill(...this.flashColor(this.components.body.color),this.fade*part.fade.main)
                        this.layer.ellipse(0,-62.75,4,2.5)
                        this.layer.fill(...this.flashColor(part.color.stripe),this.fade*part.fade.main)
                        this.layer.beginShape()
                        this.layer.vertex(-13.5,-25.25)
                        this.layer.bezierVertex(-9.4,-21.25,9.4,-21.25,13.5,-25.25)
                        this.layer.vertex(13.7,-24.75)
                        this.layer.bezierVertex(9.5,-20.5,-9.5,-20.5,-13.7,-24.75)
                        this.layer.endShape()
                    }
                    if(this.components.dress.bow.display&&lcos(this.components.dress.bow.spin+this.direction.main)>0){
                        let part=this.components.dress.bow
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(part.color),this.fade*part.fade)
                        this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                        this.layer.strokeWeight(1)
                        this.layer.strokeJoin(ROUND)
                        this.layer.triangle(
                            6.75*lsin(part.spin+this.direction.main),-46,
                            6.75*lsin(part.spin+this.direction.main)-7*lcos(part.spin+this.direction.main),-48.5,
                            6.75*lsin(part.spin+this.direction.main)-6.5*lcos(part.spin+this.direction.main),-42.5
                        )
                        this.layer.triangle(
                            6.75*lsin(part.spin+this.direction.main),-46,
                            6.75*lsin(part.spin+this.direction.main)+7*lcos(part.spin+this.direction.main),-48.5,
                            6.75*lsin(part.spin+this.direction.main)+6.5*lcos(part.spin+this.direction.main),-42.5
                        )
                        this.layer.strokeJoin(MITER)
                        for(let a=0,la=15;a<la;a++){
                            this.layer.strokeWeight(1.5+a*0.08)
                            this.layer.line(
                                6.75*lsin(part.spin+this.direction.main)-a*(1+0.25*lsin(a/la*480+this.time))*lcos(part.spin+this.direction.main),
                                -45.5+a*1.5,
                                6.75*lsin(part.spin+this.direction.main)-(a+1)*(1+0.25*lsin((a+1)/la*480+this.time))*lcos(part.spin+this.direction.main),
                                -45.5+(a+1)*1.5
                            )
                        }
                        for(let a=0,la=15;a<la;a++){
                            this.layer.strokeWeight(1.5+a*0.08)
                            this.layer.line(
                                6.75*lsin(part.spin+this.direction.main)+a*(1+0.25*lsin((a+2.5)/la*480+this.time))*lcos(part.spin+this.direction.main),
                                -45.5+a*1.5,
                                6.75*lsin(part.spin+this.direction.main)+(a+1)*(1+0.25*lsin((a+3.5)/la*480+this.time))*lcos(part.spin+this.direction.main),
                                -45.5+(a+1)*1.5
                            )
                        }
                    }
                    if(this.components.dress.tie.display&&lcos(this.components.dress.tie.spin+this.direction.main)>0){
                        let part=this.components.dress.tie
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(part.color),this.fade*part.fade)
                        this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                        this.layer.strokeWeight(0.5)
                        this.layer.strokeJoin(ROUND)
                        this.layer.quad(
                            4*lsin(part.spin+this.direction.main),-59.5,
                            4.5*lsin(part.spin+this.direction.main)-2.5*lcos(part.spin+this.direction.main),-55.5,
                            4.5*lsin(part.spin+this.direction.main)-3*lcos(part.spin+this.direction.main),-53,
                            4.5*lsin(part.spin+this.direction.main)-1.5*lcos(part.spin+this.direction.main),-55
                        )
                        this.layer.quad(
                            4*lsin(part.spin+this.direction.main),-59.5,
                            4.5*lsin(part.spin+this.direction.main)+2.5*lcos(part.spin+this.direction.main),-55.5,
                            4.5*lsin(part.spin+this.direction.main)+3*lcos(part.spin+this.direction.main),-53,
                            4.5*lsin(part.spin+this.direction.main)+1.5*lcos(part.spin+this.direction.main),-55
                        )
                        this.layer.strokeJoin(MITER)
                    }
                    if(this.components.bell.display&&lcos(this.components.bell.spin+this.direction.main)>0){
                        this.layer.noStroke()
                        this.layer.fill(...this.components.bell.color[0],this.components.bell.fade)
                        this.layer.ellipse(7*lsin(this.components.bell.spin+this.direction.main),-59,6)
                        this.layer.fill(...this.components.bell.color[1],this.components.bell.fade)
                        this.layer.ellipse(9*lsin(this.components.bell.spin+this.direction.main),-59,2*lcos((this.components.bell.spin+this.direction.main)))
                        this.layer.rect(9*lsin(this.components.bell.spin+this.direction.main),-58,2/3*lcos((this.components.bell.spin+this.direction.main)),2,1/3*lcos((this.components.bell.spin+this.direction.main)))
                    }
                    for(let a=0,la=this.components.arms.length;a<la;a++){
                        let part=this.components.arms[a]
                        if(part.display&&lcos(part.anim.top.theta+this.direction.main)>=0.4){
                            this.layer.stroke(...this.flashColor(part.color),this.fade*part.fade)
                            this.layer.strokeWeight(min(4,lcos(part.anim.top.theta+this.direction.main)*5+2))
                            this.layer.line(part.appear.stack.top.x,part.appear.stack.top.y,part.appear.stack.middle.x,part.appear.stack.middle.y)
                            this.layer.line(part.appear.stack.middle.x,part.appear.stack.middle.y,part.appear.stack.bottom.x,part.appear.stack.bottom.y)
                            if(this.components.dress.display.sleeve[a]){
                                this.displayComponent(0,[a])
                            }
                        }
                    }
                    if(this.components.head.display){
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.head.color),this.fade*this.components.head.fade)
                        this.layer.ellipse(0,this.components.head.level,this.components.head.dimensions[0],this.components.head.dimensions[1])
                    }
                    for(let a=0,la=2;a<la;a++){
                        let part=this.components.head.blush[a]
                        if(part.display){
                            this.layer.fill(...this.flashColor(part.color),this.fade*part.fade*0.2)
                            if(lcos(part.spin+this.direction.main)>0){
                                this.layer.push()
                                this.layer.translate(12.5*lsin(part.spin+this.direction.main),part.level)
                                this.layer.rotate(36*lsin(part.spin+this.direction.main))
                                this.layer.ellipse(0,0,5*lcos(part.spin+this.direction.main),4)
                                this.layer.ellipse(0,0,3.75*lcos(part.spin+this.direction.main),3)
                                this.layer.ellipse(0,0,2.5*lcos(part.spin+this.direction.main),2)
                                this.layer.ellipse(0,0,1.25*lcos(part.spin+this.direction.main),1)
                                this.layer.pop()
                            }
                        }
                    }
                    for(let a=0,la=2;a<la;a++){
                        if(this.components.head.eye[a].display){
                            this.displayGeneralComponent(0,[a])
                        }
                    }
                    if(this.components.head.mouth.display&&lcos(this.direction.main)>0){
                        this.displayGeneralComponent(1,[])
                    }
                    if(this.components.hair.display.front){
                        let size=this.fade*this.components.hair.fade.front
                        this.layer.image(this.graphicManager.getData(this.name).sprites.hair.front[this.sprites.spinDetail],0,this.components.head.level+10*size,40*size,60*size)
                    }
                    if(this.components.hair.display.glow){
                        this.layer.noFill()
                        this.layer.stroke(...this.components.hair.color.glow,this.fade*0.15*this.components.hair.fade.glow)
                        for(let a=0,la=6;a<la;a++){
                            this.layer.strokeWeight((3-a/2))
                            this.layer.arc(0,this.components.head.level,this.components.head.dimensions[0]+a,this.components.head.dimensions[1]+a,-72+a*6,-12-a*6)
                        }
                    }
                break
                
            }
            this.layer.pop()
        }
    }
    displayComponent(type,args){
        let dir
        let sc
        switch(this.name){
            case `Shiru`:
                switch(type){
                    case 0:
                        let loc=[
                            this.components.arms[args[0]].appear.top,
                            this.components.arms[args[0]].appear.middle,
                            this.components.arms[args[0]].appear.bottom
                        ]
                        dir=atan2(loc[1].x-loc[2].x,loc[1].y-loc[2].y)
                        sc=[lsin(dir+90),lcos(dir+90)]
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.dress.color.sleeve),this.fade*this.components.dress.fade.sleeve[args[0]])
                        this.layer.beginShape()
                        this.layer.vertex(
                            loc[1].x+2.1*sc[0],
                            loc[1].y+2.1*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.45+loc[2].x*0.55+3.6*sc[0],
                            loc[1].y*0.45+loc[2].y*0.55+3.6*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.3+loc[2].x*0.7+2.4*sc[0],
                            loc[1].y*0.3+loc[2].y*0.7+2.4*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.15+loc[2].x*0.85+2.7*sc[0],
                            loc[1].y*0.15+loc[2].y*0.85+2.7*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.25+loc[2].x*0.75+0.9*sc[0],
                            loc[1].y*0.25+loc[2].y*0.75+0.9*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.15+loc[2].x*0.85,
                            loc[1].y*0.15+loc[2].y*0.85)
                        this.layer.vertex(
                            loc[1].x*0.25+loc[2].x*0.75-0.9*sc[0],
                            loc[1].y*0.25+loc[2].y*0.75-0.9*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.15+loc[2].x*0.85-2.7*sc[0],
                            loc[1].y*0.15+loc[2].y*0.85-2.7*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.3+loc[2].x*0.7-2.4*sc[0],
                            loc[1].y*0.3+loc[2].y*0.7-2.4*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.45+loc[2].x*0.55-3.6*sc[0],
                            loc[1].y*0.45+loc[2].y*0.55-3.6*sc[1])
                        this.layer.vertex(
                            loc[1].x-2.1*sc[0],
                            loc[1].y-2.1*sc[1])
                        this.layer.endShape()
                        this.layer.ellipse(loc[1].x,loc[1].y,4.5)
                        dir=atan2(loc[0].x-loc[1].x,loc[0].y-loc[1].y)
                        sc=[lsin(dir+90),lcos(dir+90)]
                        this.layer.quad(
                            loc[1].x-2.1*sc[0],
                            loc[1].y-2.1*sc[1],
                            loc[1].x+2.1*sc[0],
                            loc[1].y+2.1*sc[1],
                            loc[0].x+2.1*sc[0],
                            loc[0].y+2.1*sc[1],
                            loc[0].x-2.1*sc[0],
                            loc[0].y-2.1*sc[1]
                        )
                        dir=atan2(loc[1].x-loc[2].x,loc[1].y-loc[2].y)
                        sc=[lsin(dir+90),lcos(dir+90)]
                        this.layer.stroke(...this.flashColor(this.components.dress.color.tie),this.fade*this.components.dress.fade.sleeve[[args[0]]])
                        this.layer.strokeWeight(0.5)
                        this.layer.line(
                            loc[1].x*0.3+loc[2].x*0.7+2.4*sc[0],
                            loc[1].y*0.3+loc[2].y*0.7+2.4*sc[1],
                            loc[1].x*0.3+loc[2].x*0.7-2.4*sc[0],
                            loc[1].y*0.3+loc[2].y*0.7-2.4*sc[1])
                    break
                }
            break
            case `Meri`:
                switch(type){
                    case 0:
                        let loc=[
                            this.components.arms[args[0]].appear.top,
                            this.components.arms[args[0]].appear.middle,
                            this.components.arms[args[0]].appear.bottom
                        ]
                        dir=atan2(loc[1].x-loc[2].x,loc[1].y-loc[2].y)
                        sc=[lsin(dir+90),lcos(dir+90)]
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.dress.color.highlight),this.fade*this.components.dress.fade.sleeve[args[0]])
                        this.layer.quad(
                            loc[1].x*0.2+loc[2].x*0.8+2.4*sc[0],
                            loc[1].y*0.2+loc[2].y*0.8+2.4*sc[1],
                            loc[1].x*0.2+loc[2].x*0.8-2.4*sc[0],
                            loc[1].y*0.2+loc[2].y*0.8-2.4*sc[1],
                            loc[1].x*0.25+loc[2].x*0.75-2.5*sc[0],
                            loc[1].y*0.25+loc[2].y*0.75-2.5*sc[1],
                            loc[1].x*0.25+loc[2].x*0.75+2.5*sc[0],
                            loc[1].y*0.25+loc[2].y*0.75+2.5*sc[1]
                        )
                        this.layer.fill(...this.flashColor(this.components.dress.color.sleeve),this.fade*this.components.dress.fade.sleeve[args[0]])
                        this.layer.beginShape()
                        this.layer.vertex(
                            loc[1].x+2.1*sc[0],
                            loc[1].y+2.1*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.4+loc[2].x*0.6+3.25*sc[0],
                            loc[1].y*0.4+loc[2].y*0.6+3.25*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.25+loc[2].x*0.75+2.5*sc[0],
                            loc[1].y*0.25+loc[2].y*0.75+2.5*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.25+loc[2].x*0.75-2.5*sc[0],
                            loc[1].y*0.25+loc[2].y*0.75-2.5*sc[1])
                        this.layer.vertex(
                            loc[1].x*0.4+loc[2].x*0.6-3.25*sc[0],
                            loc[1].y*0.4+loc[2].y*0.6-3.25*sc[1])
                        this.layer.vertex(
                            loc[1].x-2.1*sc[0],
                            loc[1].y-2.1*sc[1])
                        this.layer.endShape()
                        this.layer.ellipse(loc[1].x,loc[1].y,4.3)
                        dir=atan2(loc[0].x-loc[1].x,loc[0].y-loc[1].y)
                        sc=[lsin(dir+90),lcos(dir+90)]
                        this.layer.quad(
                            loc[1].x-2.1*sc[0],
                            loc[1].y-2.1*sc[1],
                            loc[1].x+2.1*sc[0],
                            loc[1].y+2.1*sc[1],
                            loc[0].x+2.1*sc[0],
                            loc[0].y+2.1*sc[1],
                            loc[0].x-2.1*sc[0],
                            loc[0].y-2.1*sc[1]
                        )
                        this.layer.fill(...this.flashColor(this.components.dress.color.highlight),this.fade*this.components.dress.fade.sleeve[args[0]])
                        this.layer.beginShape()
                        let set=[
                            [0,1],
                            [0.225,1],
                            [0.175,2/3],
                            [0.225,1/3],
                            [0.175,0],
                            [0.225,-1/3],
                            [0.175,-2/3],
                            [0.225,-1],
                            [0,-1],
                        ]
                        for(let a=0,la=set.length;a<la;a++){
                            this.layer.vertex(
                                loc[0].x*(1-set[a][0])+
                                loc[1].x*set[a][0]+
                                (2.15+1.75*set[a][0])*set[a][1]*sc[0],
                                loc[0].y*(1-set[a][0])+
                                loc[1].y*set[a][0]+
                                (2.15+1.75*set[a][0])*set[a][1]*sc[1]
                            )
                        }
                        this.layer.endShape()
                        this.layer.noStroke()
                        this.layer.fill(...this.flashColor(this.components.dress.color.highlight),this.fade*this.components.dress.fade.sleeve[args[0]])
                        this.layer.quad(
                            loc[0].x*0.2+loc[1].x*0.8+2.1*sc[0],
                            loc[0].y*0.2+loc[1].y*0.8+2.1*sc[1],
                            loc[0].x*0.2+loc[1].x*0.8-2.1*sc[0],
                            loc[0].y*0.2+loc[1].y*0.8-2.1*sc[1],
                            loc[0].x*0.25+loc[1].x*0.75-2.1*sc[0],
                            loc[0].y*0.25+loc[1].y*0.75-2.1*sc[1],
                            loc[0].x*0.25+loc[1].x*0.75+2.1*sc[0],
                            loc[0].y*0.25+loc[1].y*0.75+2.1*sc[1]
                        )
                        this.layer.fill(...this.flashColor(this.components.dress.color.bow),this.fade*this.components.dress.fade.sleeve[args[0]])
                        this.layer.quad(
                            loc[0].x*0.225+loc[1].x*0.775+1.4*sc[0]+0.8*sc[1],
                            loc[0].y*0.225+loc[1].y*0.775+1.4*sc[1]-0.8*sc[0],
                            loc[0].x*0.225+loc[1].x*0.775+1.4*sc[0]-0.8*sc[1],
                            loc[0].y*0.225+loc[1].y*0.775+1.4*sc[1]+0.8*sc[0],
                            loc[0].x*0.225+loc[1].x*0.775-1.4*sc[0]+0.8*sc[1],
                            loc[0].y*0.225+loc[1].y*0.775-1.4*sc[1]-0.8*sc[0],
                            loc[0].x*0.225+loc[1].x*0.775-1.4*sc[0]-0.8*sc[1],
                            loc[0].y*0.225+loc[1].y*0.775-1.4*sc[1]+0.8*sc[0]
                        )
                        this.layer.ellipse(
                            loc[0].x*0.225+loc[1].x*0.775,
                            loc[0].y*0.225+loc[1].y*0.775,
                            0.8
                        )
                        this.layer.fill(...this.flashColor(this.components.dress.color.main),this.fade*this.components.dress.fade.sleeve[args[0]])
                        this.layer.push()
                        this.layer.translate(loc[0].x,loc[0].y)
                        this.layer.rotate(-dir)
                        this.layer.arc(0,0,4.6,4.2,0,180)
                        this.layer.ellipse(0,0,4.6,0.4)
                        this.layer.pop()
                        this.layer.beginShape()
                        set=[
                            [0,1],
                            [0.16,1],
                            [0.11,2/3],
                            [0.16,1/3],
                            [0.11,0],
                            [0.16,-1/3],
                            [0.11,-2/3],
                            [0.16,-1],
                            [0,-1],
                        ]
                        for(let a=0,la=set.length;a<la;a++){
                            this.layer.vertex(
                                loc[0].x*(1-set[a][0])+
                                loc[1].x*set[a][0]+
                                (2.2+2*set[a][0])*set[a][1]*sc[0],
                                loc[0].y*(1-set[a][0])+
                                loc[1].y*set[a][0]+
                                (2.2+2*set[a][0])*set[a][1]*sc[1]
                            )
                        }
                        this.layer.endShape()
                    break
                }
            break
            case ``:
                switch(type){
                    case 0:
                    break
                }
            break
        }
    }
    displayGeneralComponent(type,args){
        let part
        switch(type){
            case 0:
                part=this.components.head.eye[args[0]]
                this.layer.noFill()
                if(part.style==6&&part.anim>0){
                    this.layer.stroke(...this.components.head.eye[args[0]].color.back,this.fade*part.fade)
                    this.layer.strokeWeight((4-part.anim*3)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level-part.anim*2)
                    this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+part.anim*2,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level)
                    this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+part.anim*4,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+part.anim*2)
                    this.layer.stroke(...this.components.head.eye[args[0]].color.front,this.fade*part.fade)
                    this.layer.strokeWeight((3-part.anim*2)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level-part.anim*2+0.2-part.anim*0.2)
                    this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2+part.anim*2,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2)
                    this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2+part.anim*4,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2+part.anim*2)
                }else if(part.style==5){
                    this.layer.stroke(...this.components.head.eye[args[0]].color.back,this.fade*part.fade)
                    this.layer.strokeWeight((6-part.anim*3)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    if(part.anim==0){
                        this.layer.point(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level)
                        this.layer.point(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level)
                    }else{
                        this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level-part.anim*2)
                        this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+part.anim*2)
                    }
                    this.layer.stroke(...this.components.head.eye[args[0]].color.front,this.fade*part.fade)
                    this.layer.strokeWeight((6-part.anim*2)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    if(part.anim==0){
                        this.layer.point(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2)
                        this.layer.point(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2)
                    }else{
                        this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level-part.anim*2+0.2-part.anim*0.2)
                        this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+part.anim*2+0.2-part.anim*0.2)
                    }
                    if(part.anim==0&&constrain(lcos(part.spin+this.direction.head)*5,0,1)>0){
                        this.layer.stroke(...this.components.head.eye[args[0]].color.glow,this.fade*part.fade/4)
                        this.layer.strokeWeight(0.6)
                        this.layer.arc(lsin(part.spin+this.direction.head)*(this.components.head.dimensions[0]*0.5+0.5),part.level,2.7*constrain(lcos(part.spin+this.direction.head)*5,0,1),2.7*constrain(lcos(part.spin+this.direction.head)*5,0,1),-72,-12)
                        if(part.style==4){
                            this.layer.stroke(...this.components.head.eye[args[0]].color.back,this.fade*part.fade)
                            this.layer.strokeWeight(0.5)
                            this.layer.arc(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5,part.level,10*constrain(lcos(part.spin+this.direction.head)*5,0,1),10*constrain(lcos(part.spin+this.direction.head)*5,0,1),-165+args[0]*90,-105+args[0]*90)
                        }
                    }
                }else if(part.style==3&&part.anim>0){
                    this.layer.stroke(...this.components.head.eye[args[0]].color.back,this.fade*part.fade)
                    this.layer.strokeWeight((4-part.anim*3)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level-part.anim*2)
                    this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+part.anim*2,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level)
                    this.layer.stroke(...this.components.head.eye[args[0]].color.front,this.fade*part.fade)
                    this.layer.strokeWeight((3-part.anim*2)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level-part.anim*2+0.2-part.anim*0.2)
                    this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2+part.anim*2,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2)
                }else if(part.style==2&&part.anim>0){
                    this.layer.stroke(...this.components.head.eye[args[0]].color.back,this.fade*part.fade)
                    this.layer.strokeWeight((4-part.anim*3)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    this.layer.arc(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5,part.level-1*part.anim,3*part.anim,4*part.anim,30,150)
                    this.layer.stroke(...this.components.head.eye[args[0]].color.front,this.fade*part.fade)
                    this.layer.strokeWeight((3-part.anim*2)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    this.layer.arc(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5),part.level-1*part.anim,3*part.anim,4*part.anim,30,150)
                }else if(part.style==1&&part.anim>0){                    
                    this.layer.stroke(...this.components.head.eye[args[0]].color.back,this.fade*part.fade)
                    this.layer.strokeWeight((4-part.anim*3)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    this.layer.arc(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5,part.level+2*part.anim,3*part.anim,4*part.anim,-150,-30)
                    this.layer.stroke(...this.components.head.eye[args[0]].color.front,this.fade*part.fade)
                    this.layer.strokeWeight((3-part.anim*2)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    this.layer.arc(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5),part.level+2*part.anim,3*part.anim,4*part.anim,-150,-30)
                }else{
                    this.layer.stroke(...this.components.head.eye[args[0]].color.back,this.fade*part.fade)
                    this.layer.strokeWeight((4-part.anim*3)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    if(part.anim==0){
                        this.layer.point(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level)
                        this.layer.point(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level)
                    }else{
                        this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level-part.anim*2)
                        this.layer.line(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level,lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+part.anim*2)
                    }
                    this.layer.stroke(...this.components.head.eye[args[0]].color.front,this.fade*part.fade)
                    this.layer.strokeWeight((3-part.anim*2)*constrain(lcos(part.spin+this.direction.head)*5,0,1))
                    if(part.anim==0){
                        this.layer.point(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2)
                        this.layer.point(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2)
                    }else{
                        this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level-part.anim*2+0.2-part.anim*0.2)
                        this.layer.line(lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)-(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+0.2-part.anim*0.2,lsin(part.spin+this.direction.head)*((this.components.head.dimensions[0]*0.5+0.5)-part.anim*0.5)+(args[0]*2-1)*lcos(part.spin+this.direction.head)*part.anim*2,part.level+part.anim*2+0.2-part.anim*0.2)
                    }
                    if(part.anim==0&&constrain(lcos(part.spin+this.direction.head)*5,0,1)>0){
                        this.layer.stroke(...this.components.head.eye[args[0]].color.glow,this.fade*part.fade/4)
                        this.layer.strokeWeight(0.6)
                        this.layer.arc(lsin(part.spin+this.direction.head)*(this.components.head.dimensions[0]*0.5+0.5),part.level,1.8*constrain(lcos(part.spin+this.direction.head)*5,0,1),1.8*constrain(lcos(part.spin+this.direction.head)*5,0,1),-72,-12)
                        if(part.style==4){
                            this.layer.stroke(...this.components.head.eye[args[0]].color.back,this.fade*part.fade)
                            this.layer.strokeWeight(0.5)
                            this.layer.arc(lsin(part.spin+this.direction.head)*this.components.head.dimensions[0]*0.5,part.level,6.5*constrain(lcos(part.spin+this.direction.head)*5,0,1),6.5*constrain(lcos(part.spin+this.direction.head)*5,0,1),-165+args[0]*90,-105+args[0]*90)
                        }
                    }
                }
            break
            case 1:
                part=this.components.head.mouth
                if(part.anim.open>0){
                    this.layer.fill(...part.color.in,this.fade*part.fade)
                }else{
                    this.layer.noFill()
                }
                this.layer.stroke(...part.color.out,this.fade*part.fade)
                this.layer.strokeWeight(0.5-part.anim.open*0.25)
                this.layer.arc(lsin(this.direction.main)*(this.components.head.dimensions[0]*0.5-2),part.level,part.anim.x*lcos(this.direction.main),part.anim.y*(0.5+lcos(this.direction.main)*0.5),part.anim.wide,180-part.anim.wide)
                this.layer.strokeWeight(0.25*part.anim.open)
                this.layer.line(lsin(this.direction.main)*(this.components.head.dimensions[0]*0.5-2)-part.anim.x/2*lcos(this.direction.main),part.level,lsin(this.direction.main)*(this.components.head.dimensions[0]*0.5-2)+part.anim.x/2*lcos(this.direction.main),part.level)
            break
        }
    }
    update(){
        this.time++
    }
}